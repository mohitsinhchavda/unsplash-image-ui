import { useEffect, useState } from 'react';
import { useRouter } from 'next/router'
import Head from 'next/head';
import styles from '../../styles/Home.module.css'
import NavBar from '../components/NavBar';
import Loader from "../components/Loader";
import NoDataComponent from "../components/NoDataComponent";
import ImgList from "../components/ImgList";
import { fetchPhotos, searchPhotos } from '../apiUtilityFuncs';
import useSWR from 'swr';

const rowsPerPage = 10;


export default function Home({
  res
}) {
  const router = useRouter()
  const { page: currentPage, search: searchQueryUri } = router.query;

  const [photosList, setPhotosList] = useState([]);

  const [page, setPage] = useState(Number(currentPage) || 1);

  const {
    data,
  } = useSWR(
    `/api/${searchQueryUri ? "searchImage" : "fetchImage"}?page=${currentPage || 1}&per_page=30${searchQueryUri ? "&"+searchQueryUri : ""}`
  );

  useEffect(() => {
    setPhotosList(data);
  }, [data])


  return (
    <div className={styles.container}>
      <Head>
        <title>Mohit&apos;s Unsplash Image</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavBar
        photosList={photosList}
        setPhotosList={setPhotosList}
      />

      {
        !data
          ?
          <Loader />
          :
          !photosList || !Array.isArray(photosList) || (Array.isArray(photosList) && photosList.length === 0)
            ?
            <NoDataComponent />
            :
            <ImgList
              photosList={photosList}
              setPhotosList={setPhotosList}
              page={page}
              setPage={setPage}
              rowsPerPage={rowsPerPage}
            />
      }
    </div>
  )
}
/*
export async function getServerSideProps(context) {

  const { search, page } = context.query;

  let res;

  if (search) {
    res = await searchPhotos(search).catch(() => []);
  }
  else {
    res = await fetchPhotos(page || 1).catch(() => []);
  }

  if (!res) {
    return {
      notFound: true,
    }
  }

  return {
    props: {
      res
    },
  }
}
*/