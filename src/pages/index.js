import { useEffect, useState } from 'react';
import { useRouter } from 'next/router'
import Head from 'next/head';
import styles from '../../styles/Home.module.css'
import NavBar from './components/NavBar';
import ImgList from "./components/ImgList";

export default function Home({
  res
}) {
  const router = useRouter()
  const { search } = router.query;

  const [photosList, setPhotosList] = useState([]);

  useEffect(() => {
    if (Array.isArray(res)) {
      setPhotosList(res)
    }
    else if (Array.isArray(res.results)) {
      setPhotosList(res.results)
    }
  }, [])


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

        <NavBar
          photosList={photosList}
          setPhotosList={setPhotosList}
        />

        <ImgList
        photosList={photosList}
        setPhotosList={setPhotosList}
        />
    </div>
  )
}

export async function getServerSideProps(context) {

  const { search } = context.query;

  let res;

  if (search) {
    res = await searchPhotos(search).catch(() => []);
  }
  else {
    res = await fetchPhotos().catch(() => []);
  }

  if (!res) {
    return {
      notFound: true,
    }
  }

  return {
    props: {
      res
    },
  }
}

export async function fetchPhotos(page = 1) {
  try {
    const res = await fetch(`${process.env.UNSPLASH_BASE_URL}/photos?page=${page}&per_page=30`, {
      headers: {
        "content-type": "application/json",
        "accept": "application/json",
        "Authorization": `Bearer ${process.env.UNSPLASH_OAUTH_TOKEN}`
      }
    });
    return res.json();
  }
  catch {
    return Promise.reject([])
  }
}

export async function searchPhotos(search, page = 1) {
  try {
    const res = await fetch(`${process.env.UNSPLASH_BASE_URL}/search/photos?query=${search}&per_page=30&page=${page}`, {
      headers: {
        "content-type": "application/json",
        "accept": "application/json",
        "Authorization": `Bearer ${process.env.UNSPLASH_OAUTH_TOKEN}`
      }
    });

    return res.json();
  }
  catch {
    return Promise.reject([])
  }
}